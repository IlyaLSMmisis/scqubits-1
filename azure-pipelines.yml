# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
  branches:
    include:
      - master
      - jk-devel

jobs:
- job: Linux
  pool:
    vmImage: 'ubuntu-latest'
  strategy:
    matrix:
      Python36:
        python.version: '3.6'
      Python37:
        python.version: '3.7'
 #     Python38:
 #       python.version: '3.8'
  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
    displayName: 'Use Python $(python.version)'
  - script: |
      python -m pip install --upgrade pip
    displayName: 'Upgrade pip'
  - script: |
      pip install wheel
      pip install --upgrade cython
      pip install --upgrade numpy
      pip install --upgrade scipy
    displayName: 'Install/upgrade cython, numpy, scipy'
  - script: |
      pip install -r requirements.txt
      pip install -r optional-requirements.txt
    displayName: 'Install dependencies'
  - script: |
      pip install pytest pytest-azurepipelines
      pip install pathos
      pip install .
    displayName: 'Install scqubits'
  - script: |
      pytest -v --pyargs scqubits
    displayName: 'Pytest: single-core'
  - script: |
      export OMP_NUM_THREADS=1
      export OPENBLAS_NUM_THREADS=1
      export MKL_NUM_THREADS=1
      export VECLIB_MAXIMUM_THREADS=1
      export NUMEXPR_NUM_THREADS=1
      pytest -v --pyargs scqubits --num_cpus=4
    displayName: 'Pytest: multiprocessing'
#
#
- job: Windows
  pool:
    vmImage: 'windows-latest'
  strategy:
    matrix:
      Python36:
        python.version: '3.6'
      Python37:
        python.version: '3.7'
#      Python38:
#        python.version: '3.8'
  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
    displayName: 'Use Python $(python.version)'
  - script: |
      python -m pip install --upgrade pip
    displayName: 'Upgrade pip'
  - script: |
      pip install wheel
      pip install --upgrade cython
      pip install --upgrade numpy
      pip install --upgrade scipy
    displayName: 'Install/upgrade cython, numpy, scipy'
  - script: |
      pip install -r requirements.txt
      pip install -r optional-requirements.txt
    displayName: 'Install dependencies'
  - script: |
      pip install pytest pytest-azurepipelines
      pip install pathos
      pip install .
    displayName: 'Install scqubits'
  - script: |
      pytest -v --pyargs scqubits
    displayName: 'Pytest: single-core'
  - script: |
      set OMP_NUM_THREADS=1
      set OPENBLAS_NUM_THREADS=1
      set MKL_NUM_THREADS=1
      set VECLIB_MAXIMUM_THREADS=1
      set NUMEXPR_NUM_THREADS=1
      pytest -v --pyargs scqubits --num_cpus=4
    displayName: 'Pytest: multiprocessing'
#
#
- job: macOS
  pool:
    vmImage: "macos-latest"
  strategy:
    matrix:
      Python36:
        python.version: '3.6'
      Python37:
        python.version: '3.7'
#      Python38:
#        python.version: '3.8'
  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
    displayName: 'Use Python $(python.version)'
  - script: |
      python -m pip install --upgrade pip
    displayName: 'Upgrade pip'
  - script: |
      pip install wheel
      pip install --upgrade cython
      pip install --upgrade numpy
      pip install --upgrade scipy
      pip install --upgrade sympy
    displayName: 'Install/upgrade cython, numpy, scipy, sympy'
  - script: |
      pip install -r requirements.txt
      pip install -r optional-requirements.txt
    displayName: 'Install dependencies'
  - script: |
      pip install pytest pytest-azurepipelines
      pip install pytest-xdist
      pip install pathos
      pip install .
    displayName: 'Install scqubits'
  - script: |
      export OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES
      pytest -v --pyargs scqubits.tests.test_explorer
      pytest -v --pyargs scqubits.tests.test_fluxonium
      pytest -v --pyargs scqubits.tests.test_fluxqubit
      pytest -v --pyargs scqubits.tests.test_fullzeropi
      pytest -v --pyargs scqubits.tests.test_hilbertspace
      pytest -v --pyargs scqubits.tests.test_spectrumlookup
      pytest -v --pyargs scqubits.tests.test_transmon
      pytest -v --pyargs scqubits.tests.test_zeropi
    displayName: 'Pytest: single-core'
  - script: |
      export OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES
      export OMP_NUM_THREADS=1
      export OPENBLAS_NUM_THREADS=1
      export MKL_NUM_THREADS=1
      export VECLIB_MAXIMUM_THREADS=1
      export NUMEXPR_NUM_THREADS=1
      export OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES
      cd $(python -c "import scqubits.tests.test_hilbertspace as tst; import os; print(os.path.dirname(tst.__file__))")
      pytest -v test_explorer.py --num_cpus=2
      pytest -v test_fluxonium.py --num_cpus=2
      pytest -v test_fluxqubit.py --num_cpus=2
      pytest -v test_hilbertspace.py --num_cpus=2
      pytest -v test_spectrumlookup.py --num_cpus=2
      pytest -v test_transmon.py --num_cpus=2
      pytest -v test_zeropi.py --num_cpus=2
    displayName: 'Pytest: multiprocessing'
